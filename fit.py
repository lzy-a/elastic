import numpy as np
from scipy.optimize import nnls
import matplotlib.pyplot as plt

# 您提供的数据（示例数据，请替换为您的实际数据）
batch_sizes = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]
data_time = [0.0001417780660920673, 0.00014797409309281242, 0.00019451214339998032, 0.000213991469807095, 0.0002561354531182183, 0.00033382292853461373, 0.0004784354527791341, 0.0007581275939941406, 0.0014150554845212071, 0.0026277517141894253, 0.005437475719532383, 0.012121942308213975, 0.024760719140370688, 0.051141789224412704, 0.10466029379102919, 0.17972823425575538, 0.28120071358150905]
forward_time = [0.0014616803586483002, 0.0014567180110348595, 0.0014727216098043654, 0.0014801233503553602, 0.0014957083808051215, 0.0015074667400783962, 0.001508071772257487, 0.0014916847652859159, 0.0015119227442201419, 0.0015410092901188012, 0.0015488126945227344, 0.0015795780552758112, 0.001615938875410292, 0.0017290168338351779, 0.00187278323703342, 0.0019203910121211299, 0.0019027524524264866]
loss_time = [0.0024483787112765843, 0.002527254941066106, 0.002522720101144579, 0.0025415580007765027, 0.002551025851567586, 0.0025811245070563424, 0.002583621639675564, 0.002573595894707574, 0.00258228894789929, 0.0025841607662775968, 0.002610727704527006, 0.002644930945502387, 0.005123208628760444, 0.005382341808742947, 0.005609427558051216, 0.006732649273342556, 0.010456826951768663]
optimizer_time = [0.0027131642440954844, 0.002695619342062208, 0.0026972622831662497, 0.0026902206553353204, 0.0027032753414577906, 0.002708250215318468, 0.0026993269390530057, 0.0026906539916992187, 0.0027009165367421675, 0.0027184704053680353, 0.0027144008883276402, 0.0027270502514309355, 0.0027467528978983562, 0.002771963013543023, 0.006863133112589518, 0.012643637480559173, 0.018443041377597384]
step_time = [0.006833446658319897, 0.006892231421338187, 0.006953264631165398, 0.006991883579889933, 0.007073198387357924, 0.0071989606115553115, 0.007338515917460124, 0.007583440272013346, 0.008284838351113263, 0.009549278953104093, 0.012390697388038689, 0.019163960218429567, 0.034340247843000625, 0.061125381787618, 0.11912249459160698, 0.2011560422402841, 0.31213200092315674]
throughput = [146.339036506925, 290.18178260933706, 575.2693464407354, 1144.183810927518, 2262.060121005108, 4445.086134883923, 8721.10937958564, 16878.882856423814, 30899.81833690218, 53616.61362228496, 82642.6445527202, 106867.26421141715, 119276.94927323781, 134019.61280934577, 137539.09415824446, 162898.41276981428, 209962.45116223826]

# 定义拟合函数
def nnls_fit(batch_sizes, step_time, num_points):
    # 截取前 num_points 个数据点
    batch_sizes_subset = batch_sizes[:num_points]
    step_time_subset = step_time[:num_points]

    # 构建设计矩阵
    X = np.vstack([batch_sizes_subset, np.ones_like(batch_sizes_subset)]).T

    # 使用 NNLS 求解权重向量
    W, _ = nnls(X, step_time_subset)

    # 生成拟合曲线
    fit_curve = X @ W

    return W, fit_curve


# 绘制拟合曲线图
fig, axes = plt.subplots(4, 4, figsize=(12, 10))
axes = axes.flatten()

# 遍历不同数据点数量
for i, num_points in enumerate([3,4,5, 6, 7, 8, 9, 10, 11, 12, 13, 14,15,16,17]):
    # 进行拟合
    weights, fit_curve = nnls_fit(batch_sizes, step_time, num_points)

    # 绘制拟合曲线
    axes[i].scatter(batch_sizes[:num_points], step_time[:num_points], label='Actual Step Time')
    axes[i].plot(batch_sizes[:num_points], fit_curve, label=f'NNLS Fit ({num_points} points)', color='red')

    # 在图上标出权重
    axes[i].text(0.5, 0.5, f'W1 = {weights[0]:.7f}\nW2 = {weights[1]:.7f}', transform=axes[i].transAxes,
                 bbox=dict(facecolor='white', alpha=0.7, edgecolor='none'))

    axes[i].set_xlabel('Batch Size')
    axes[i].set_ylabel('Step Time')
    axes[i].legend()

plt.tight_layout()
plt.show()

# 打印拟合得到的权重向量
print("Weight Vector for Step Time (W):", weights)
